<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Simple Shooter Game</title>
<style>
  body { margin: 0; background: #000; overflow: hidden; }
  canvas { display: block; margin: 0 auto; background: #111; }
</style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const ship = {
  x: canvas.width / 2 - 20,
  y: canvas.height - 60,
  width: 40,
  height: 40,
  speed: 5,
  dx: 0,
};

const bullets = [];
const enemies = [];
let enemyTimer = 0;
let score = 0;
let gameOver = false;

function drawShip() {
  ctx.fillStyle = 'lime';
  ctx.beginPath();
  ctx.moveTo(ship.x + ship.width/2, ship.y);
  ctx.lineTo(ship.x, ship.y + ship.height);
  ctx.lineTo(ship.x + ship.width, ship.y + ship.height);
  ctx.closePath();
  ctx.fill();
}

function drawBullets() {
  ctx.fillStyle = 'yellow';
  bullets.forEach(bullet => {
    ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
  });
}

function drawEnemies() {
  ctx.fillStyle = 'red';
  enemies.forEach(enemy => {
    ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
  });
}

function moveShip() {
  ship.x += ship.dx;
  if (ship.x < 0) ship.x = 0;
  if (ship.x + ship.width > canvas.width) ship.x = canvas.width - ship.width;
}

function moveBullets() {
  bullets.forEach((bullet, i) => {
    bullet.y -= bullet.speed;
    if (bullet.y < 0) bullets.splice(i, 1);
  });
}

function moveEnemies() {
  enemies.forEach((enemy, i) => {
    enemy.y += enemy.speed;
    if (enemy.y > canvas.height) enemies.splice(i, 1);
  });
}

function spawnEnemy() {
  enemyTimer++;
  if (enemyTimer > 60) {
    const x = Math.random() * (canvas.width - 40);
    enemies.push({ x, y: 0, width: 40, height: 40, speed: 2 + Math.random() * 2 });
    enemyTimer = 0;
  }
}

function detectCollision(rect1, rect2) {
  return rect1.x < rect2.x + rect2.width &&
         rect1.x + rect1.width > rect2.x &&
         rect1.y < rect2.y + rect2.height &&
         rect1.y + rect1.height > rect2.y;
}

function checkCollisions() {
  enemies.forEach((enemy, ei) => {
    if (detectCollision(ship, enemy)) {
      gameOver = true;
    }
    bullets.forEach((bullet, bi) => {
      if (detectCollision(bullet, enemy)) {
        enemies.splice(ei, 1);
        bullets.splice(bi, 1);
        score += 10;
      }
    });
  });
}

function drawScore() {
  ctx.fillStyle = 'white';
  ctx.font = '20px Arial';
  ctx.fillText('Score: ' + score, 10, 30);
}

function drawGameOver() {
  ctx.fillStyle = 'white';
  ctx.font = '48px Arial';
  ctx.fillText('Game Over', canvas.width / 2 - 130, canvas.height / 2);
  ctx.font = '24px Arial';
  ctx.fillText('Refresh to Play Again', canvas.width / 2 - 110, canvas.height / 2 + 40);
}

function update() {
  if (gameOver) {
    drawGameOver();
    return;
  }
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawShip();
  drawBullets();
  drawEnemies();
  moveShip();
  moveBullets();
  moveEnemies();
  spawnEnemy();
  checkCollisions();
  drawScore();
  requestAnimationFrame(update);
}

function shoot() {
  bullets.push({ x: ship.x + ship.width / 2 - 2.5, y: ship.y, width: 5, height: 10, speed: 7 });
}

document.addEventListener('keydown', e => {
  if (e.code === 'ArrowLeft') {
    ship.dx = -ship.speed;
  } else if (e.code === 'ArrowRight') {
    ship.dx = ship.speed;
  } else if (e.code === 'Space') {
    shoot();
  }
});

document.addEventListener('keyup', e => {
  if (e.code === 'ArrowLeft' || e.code === 'ArrowRight') {
    ship.dx = 0;
  }
});

update();
</script>
</body>
</html>
